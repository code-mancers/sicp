;; Exercise 1.8.  Newton's method for cube roots is based on the fact that if y is an
;; approximation to the cube root of x, then a better approximation is given by the value
;; (x/y^2 + 2y)/3
;; Use this formula to implement a cube-root procedure analogous to the square-root procedure.
;; (In section 1.3.4 we will see how to implement Newton's method in general as an abstraction
;; of these square-root and cube-root procedures.)

(define (cube-root x)
  (cube-root-iter 1.0 x))

(define (cube-root-iter guess x)
  (if (good-enough? guess x)
    guess
    (cube-root-iter (improve guess x) x)))


(define (good-enough? guess x)
  (< (abs (- (improve guess x) guess)) 0.0001))

(define (square value) (* value value))

(define (improve guess x)
  (/ (+ (/ x (square guess)) (* guess 2)) 3))


(define (cube x) (* x  x x))

; tests
;
;  1/1_000_000
;  root  -> 1/1_00
;        -> .01
(print (cube-root .000001))

;  1_000_000_000
;  root -> 1_000
(print (cube-root 1000000000))


;; Excercise 1.9. Each of the following two procedures defines a method for
;; adding two positive integers in terms of the procedures inc, which
;; increments its argument by 1, and dec, which decrements its argument by 1.
;; Using the substitution model, illustrate the process generated by each
;; procedure in evaluating (+ 4 5). Are these processes iterative or recursive?
;;
;; procedure 1
;; (define (+ a b)
;;   (if (= a 0)
;;     b(inc (+ (dec a) b))))
;;
;; procedure 2
;; (define (+ a b)
;;     (if (= a 0)
;;         b
;;         (+ (dec a) (inc b))))

;; procedure 1:
;; (+ 4 5)
;; (inc (+ (dec 4) 5))
;; (inc (+ 3 5))
;; (inc (inc (+ (dec 3) 5)))
;; (inc (inc (+ 2 5)))
;; (inc (inc (inc (+ (dec 2) 5))))
;; (inc (inc (inc (+ 1 5))))
;; (inc (inc (inc (inc (+ (dec 1) 5)))))
;; (inc (inc (inc (inc (+ 0 5)))))
;; (inc (inc (inc (inc 5))))
;; (inc (inc (inc 6)))
;; (inc (inc 7))
;; (inc 8)
;; 9
;;
;; This is a recursive process


;; procedure 2:
;; (+ 4 5)
;; (+ (dec 4) (inc 5))
;; (+ 3 6)
;; (+ (dec 3) (inc 6))
;; (+ 2 7)
;; (+ (dec 2) (inc 7))
;; (+ 1 8)
;; (+ (dec 1) (inc 8))
;; (+ 0 9)
;; 9
;;
;; This is an iterative process

;; Exercise 1.11
;; A function f is defined by the rule that f(n) = n if n<3 and f(n) = f(n - 1)
;; + 2f(n - 2) + 3f(n - 3) if n> 3. Write a procedure that computes f by means
;; of a recursive process. Write a procedure that computes f by means of an
;; iterative process.

;; recursive
(define (f n)
  (if (< n 3)
    n
    (+ (f (- n 1)) (* 2 (f (- n 2))) (* 3 (f (- n 3))))))
